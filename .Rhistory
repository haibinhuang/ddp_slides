assignment.filtered <- assignment.no.na[, -c(1,3,4,5,6)]
library(caret)
set.seed(1)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.1, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
rm(df)
rm(assignment)
rm(df.training.filtered)
rm(df.training.no.na)
rm(df.training)
rm(df.no.na)
install.packages("randomForest")
library(randomForest)
?randomForest
modFit <- randomForest(classe ~ ., data=training)
modFit
modFit$predicted
predictions <- predict(modFit, newdata=testing)
confuionMatrix(predictions, testing$classe)
confusionMatrix(predictions, testing$classe)
install.packages("e1071")
confusionMatrix(predictions, testing$classe)
install.packages("doParallel")
library(doParallel)
registerDoParallel(cores = 2)
set.seed(1)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.2, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
df <- read.csv("pml-training.csv", na.strings=c("NA", ""))
assignment <- read.csv("pml-testing.csv", na.strings=c("NA",""))
df.col.has.na <- apply(df, 2, function(x) {any(is.na(x))})
df.no.na <- df[,!df.col.has.na]
assignment.col.has.na <- apply(assignment, 2, function(x) {any(is.na(x))})
assignment.no.na <- assignment[,!assignment.col.has.na]
df.no.na
head(df.no.na)
df.filtered <- df.no.na[, -c(1,3,4,5)]
assignment.filtered <- assignment.no.na[, -c(1,3,4,5)]
library(doParallel)
registerDoParallel(cores = 2)
df.filtered <- df.no.na[, -c(1,3,4,5)]
assignment.filtered <- assignment.no.na[, -c(1,3,4,5)]
set.seed(1)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
predictions <- predict(modFit, newdata=assignment.filtered)
predictions <- predict(modFit, newdata=assignment.filtered[,-56])
a <- cbind(assignment.filtered, classe)
a <- cbind(assignment.filtered, rep(NULL, 20)
)
a <- cbind(assignment.filtered, rep("NA", 20)
)
predictions <- predict(modFit, newdata=assignment.filtered[,-56])
predictions <- predict(modFit, newdata=a[,-56])
head(a)
colnames(a[,57]) <- classe
colnames(a[,57]) <- "classe"
colName(a[,57]) <- "classe"
colNames(a[,57]) <- "classe"
?colnames
colnames(a)[57] <- "classe"
predictions <- predict(modFit, newdata=a[,-56])
head(a)
dim(a)
b <- a[,-56]
b
predictions <- predict(modFit, newdata=b)
head(training)
dim(training)
head(b)
head(training)
b$classe <- "A"
predictions <- predict(modFit, newdata=b)
head(b)
head(training)
colnames(training)
colnames(b)
str(b)
str(training)
b$classe <- training$classe[1:20]
str(b)
predictions <- predict(modFit, newdata=b)
b$classe
str(b)
predictions <- predict(modFit, newdata=testing)
predictions <- predict(modFit, newdata=b)
predictions <- predict(modFit, newdata=b[,-56])
modFit
install.packages("psych")
library(psych)
?describe
describe(training)
describe(training)
str(training)
df.filtered <- df.no.na[, -c(1,3,4,5,6)]
assignment.filtered <- assignment.no.na[, -c(1,3,4,5,6)]
library(caret)
library(randomForest)
library(doParallel)
registerDoParallel(cores = 2)
set.seed(1)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
modFit$importance
sort(modFit$importance)
assign <- predict(modFit, newdata=assignment.filtered)
assign
colnames(training)
colnames(df.no.na)
df.filtered <- df.no.na[, -c(1,3,4,5,6,7)]
assignment.filtered <- assignment.no.na[, -c(1,3,4,5,6,7)]
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
imp <- modFit$importance
imp
impsorted <- imp[,order(imp[,2])]
impsorted <- imp[order(imp[,2]),]
impsorted <- imp[order(imp[,2])]
a <- order(imp[,2])
a <- order(imp[,1])
a
str(imp)
imp[1]
imp[[1]]
class(imp)
dim(imp)
impsorted <- imp[order(imp[,1]]
impsorted <- imp[order(imp[,1]
)]
impsorted
impsorted <- sort(imp)
imsorted
impsorted
imp
?randomForest
modFit <- randomForest(classe ~ ., ntree=2001, data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
dim(training)
preProc <- preProcess(training[,-54], method="pca", pcaComp=30)
dim(training)
colnames(training)
head(training)
preProc <- preProcess(training[,-c(1,54], method="pca", pcaComp=30)
preProc <- preProcess(training[,-c(1,54)], method="pca", pcaComp=30)
preProc
?preProcess
preProc <- preProcess(training[,-c(1,54)], method="pca", thresh=0.999)
preProc
preProc <- preProcess(training[,-c(1,54)], method="pca", thresh=0.95)
preProc
preProc$ica
modFit <- randomForest(classe ~ ., imp=TRUE, data=training)
modFit2 <- randomForest(classe ~ ., imp=TRUE, mdim2nd=30, data=training)
predictions <- predict(modFit2, newdata=testing)
confusionMatrix(predictions, testing$classe)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
modFit2 <- randomForest(classe ~ ., imp=TRUE, mdim2nd=10, data=training)
predictions <- predict(modFit2, newdata=testing)
confusionMatrix(predictions, testing$classe)
modFit <- randomForest(classe ~ ., imp=TRUE, interact=1, data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
modFit2 <- randomForest(classe ~ ., imp=TRUE, mdim2nd=40, interaction=1, data=training)
predictions <- predict(modFit2, newdata=testing)
confusionMatrix(predictions, testing$classe)
colnames(df)
colnames(df)
grep("min",colnames(df))
grep("min_",colnames(df))
grep("max_",colnames(df))
df$min_roll_bet
df$min_roll_belt
df <- read.csv("pml-training.csv")
assignment <- read.csv("pml-testing.csv")
df.col.has.na <- apply(df, 2, function(x) {any(is.na(x))})
df.no.na <- df[,!df.col.has.na]
assignment.col.has.na <- apply(assignment, 2, function(x) {any(is.na(x))})
assignment.no.na <- assignment[,!assignment.col.has.na]
head(assignment)
assignment
modFitb <- train(classe ~ ., method="gbm", data=training, verbose=FALSE)
predictions <- predict(modFitb, newdata=testing)
confusionMatrix(predictions, testing$classe)
predictionsb <- predict(modFitb, newdata=assignment.filtered)
predictions
predictions <- predict(modFit, newdata=assignment.filtered)
predictions
predictionsb
125^2
130^2
135^2
140^2
150^2
str(df)
str(training)
str(assignment)
str(assignment.filtered)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.8, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., imp=TRUE, data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
?predict
class(predictions)
?confusionMatrix
modFit$finalModel
modFit
?randomForest
modFit$mtry
modFit$err_rate
modFit$err.rate
modFit$confusion
attributes(modFit)
modFit
modFit$predicted
attributes(modFit)
modFit$classed
modFit$classes
?tuneRF
tuneRF(training[,-53], training$classe, ntreeTry=50, stepFactor=2, improve=0.05)
tuneRF(training[,-53], training$classe, ntreeTry=500, stepFactor=1, improve=0.05)
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=7, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=5, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=9, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=11, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=13, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=15, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=17, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=10, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=12, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, mtry=11, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=500, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=1000, data=testing)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=500, data=training)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=750, data=training)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=1000, data=training)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=1500, data=training)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=2000, data=training)
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=2000, data=df.filtered)
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=1500, data=df.filtered)
modFit
assignment <- predict(modFit, newdata=assignment.filtered)
assignment
hiv <- read.csv("hiv.csv")
hiv
str(hiv)
head(hiv)
head(hiv)
row.no.data <- apply(hiv, 1, function(x) {hiv[x,6]=="No Data"})
row.no.data
hiv[,6]
row.no.data <- apply(hiv, 1, function(x) {hiv[x,6]=="No data"})
row.no.data
row.no.data <- apply(hiv, 1, function(x) {x[6]=="No data"})
row.no.data
hivf <- hiv[!row.no.data,]
hivf
hivf2 <- hivf[-c(1,2,6,10)]
head(hivf2)
hivf2$Numeric
head(hivf2)
hivf2$Numeric[is.na(hivf2$Numeric)] <- (hivf2$Low+hivf2$HIgh)/2
hivf2$Numeric[is.na(hivf2$Numeric)]
apply(hivf2, 1, function(x) {if x[4]=="NA" {x[4] <- (x[5]+x[6])/2 }})
apply(hivf2, 1, function(x) {if (x[4]=="NA") {x[4] <- (x[5]+x[6])/2 }})
apply(hivf2, 1, function(x) {if (is.na(x[4])) {x[4] <- (x[5]+x[6])/2 }})
hivf2$Numeric
hivf2[85,4] <- (hivf2[85,5]+hivf2[85,6])/2
hivf2
hivf2$Numeric
apply(hivf2, 1, function(x) {if (is.na(x[4])) {x[4] <- (x[5]+x[6])/2 }})
str(hivf2)
apply(hivf2, 1, function(x) {if (is.na(x[4])) {x[4] <- (as.number(x[5])+as.number(x[6])/2 }})
apply(hivf2, 1, function(x) {if (is.na(x[4])) {x[4] <- (as.number(x[5])+as.number(x[6]))/2 }})
apply(hivf2, 1, function(x) {if (is.na(x[4])) {x[4] <- ((x[5])+(x[6]))/2}})
apply(hivf2, 1, function(x) {if (is.na(x[4])) {x[4] <- (as.intger(x[5])+as.integer(x[6]))/2}})
apply(hivf2, 1, function(x) {if (is.na(x[4])) {x[4] <- (as.integer(x[5])+as.integer(x[6]))/2}})
hivf2
is.na(hivf2$Numeric)
hivf2[is.na(hivf2$Numeric),4] <- avg(hivf2[is.na(hivf2$Numeric),5]+hivf2[is.na(hivf2$Numeric),6]
)
?avg
?average
hivf2[is.na(hivf2$Numeric),4] <- (hivf2[is.na(hivf2$Numeric),5]+hivf2[is.na(hivf2$Numeric),6])/2
hivf2$Numeric
hivf2
hivf2 <- hivf2[,-c(5,6)]
hivf2
install.packages("maps")
library(maps)
?maps
??maps
df <- read.csv("pml-training.csv", na.strings=c("NA",""))
assignment <- read.csv("pml-testing.csv", na.strings=c("NA",""))
df.col.has.na <- apply(df, 2, function(x) {any(is.na(x))})
df.no.na <- df[,!df.col.has.na]
assignment.col.has.na <- apply(assignment, 2, function(x) {any(is.na(x))})
assignment.no.na <- assignment[,!assignment.col.has.na]
df.filtered <- df.no.na[, -c(1,3,4,5,6,7)]
assignment.filtered <- assignment.no.na[, -c(1,3,4,5,6,7)]
library(caret)
library(randomForest)
library(doParallel)
registerDoParallel(cores = 2)
set.seed(1234)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- train(classe ~ ., method="rf", data=training, trControl = trainControl(allowParallel = TRUE,verboseIter = TRUE))
modFit
modFit <- randomForest(classe ~ ., imp=TRUE, proximity=TRUE, ntree=1500, data=training)
set.seed(1234)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.9, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=1500, data=training)
set.seed(1234)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.1, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., imp=TRUE, ntree=1500, data=training)
modFit
attributes(modFit)
modFit$forest
attributes(modFit)
modFit$confusion
modFit$terms
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
modFit <- randomForest(classe ~ ., imp=TRUE, proximity=TRUE, ntree=1500, data=training)
modFit
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
modFit <- randomForest(classe ~ ., imp=TRUE, proximity=TRUE, ntree=1500, data=training)
predictions <- predict(modFit, newdata=testing)
confusionMatrix(predictions, testing$classe)
i <- 1
a <- paste("model.rf", 4*i, sep=".")
a
library(caret)
library(randomForest)
library(doParallel)
registerDoParallel(cores = 2)
set.seed(1234)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
df <- read.csv("pml-training.csv", na.strings=c("NA", ""))
assignment <- read.csv("pml-testing.csv", na.strings=c("NA", ""))
df.col.has.na <- apply(df, 2, function(x) {any(is.na(x))})
df.no.na <- df[,!df.col.has.na]
assignment.col.has.na <- apply(assignment, 2, function(x) {any(is.na(x))})
assignment.no.na <- assignment[,!assignment.col.has.na]
df.filtered <- df.no.na[, -c(1,3,4,5,6,7)]
assignment.filtered <- assignment.no.na[, -c(1,3,4,5,6,7)]
library(caret)
library(randomForest)
library(doParallel)
registerDoParallel(cores = 2)
set.seed(1234)
inTrain <- createDataPartition(y=df.filtered$classe, p=0.6, list=FALSE)
training <- df.filtered[inTrain,]
testing <- df.filtered[-inTrain,]
model.rpart <- train(classe ~ ., method="rpart", data=training)
model.bag <- train(classe ~ ., method="treebag", data=training)
model.gbm <- train(classe ~ ., method="gbm", data=training)
model.rf <- randomForest(classe ~ ., data=training)
pred.rpart <- predict(model.rpart, newdata=training)
pred.bag <- predict(model.bag, newdata=training)
pred.gbm <- predict(model.gbm, newdata=training)
pred.rf <- predict(model.rf, newdata=training)
confusion.rpart <- confusionMatrix(pred.rpart, testing$classe)
confusion.bag <- confusionMatrix(pred.bag, testing$classe)
confusion.gbm <- confusionMatrix(pred.gbm, testing$classe)
confusion.rf <- confusionMatrix(pred.rf, testing$classe)
pred.rpart <- predict(model.rpart, newdata=testing)
pred.bag <- predict(model.bag, newdata=testing)
pred.gbm <- predict(model.gbm, newdata=testing)
pred.rf <- predict(model.rf, newdata=testing)
confusion.rpart <- confusionMatrix(pred.rpart, testing$classe)
confusion.bag <- confusionMatrix(pred.bag, testing$classe)
confusion.gbm <- confusionMatrix(pred.gbm, testing$classe)
confusion.rf <- confusionMatrix(pred.rf, testing$classe)
accuracy.rpart <- confusion.rpart$overall[1]
accuracy.rpart <- confusion.rpart$overall[1]
accuracy.bag <- confusion.bag$overall[1]
accuracy.gbm <- confusion.gbm$overall[1]
accuracy.rf <- confusion.rf$overall[1]
accurary <- rbind(accurary.rpart, accurary.bag, accurary.gbm, accurary.rf, colnames=c("Tree Model", "Bagging Model", "Boosting Model", "Random Forest Model"), rownames=("Accurary"))
accuracy <- rbind(accuracy.rpart, accuracy.bag, accuracy.gbm, accuracy.rf, colnames=c("Tree Model", "Bagging Model", "Boosting Model", "Random Forest Model"), rownames=("Accuracy"))
accuracy
?rbind
?data.frame
accuracy <- rbind(accuracy.rpart, accuracy.bag, accuracy.gbm, accuracy.rf)
colnames(accuracy) <- c("Tree Model", "Bagging Model", "Boosting Model", "Random Forest Model")
rownames(accuracy) <- "Accuracy"
accuracy
accuracy <- cbind(accuracy.rpart, accuracy.bag, accuracy.gbm, accuracy.rf)
colnames(accuracy) <- c("Tree Model", "Bagging Model", "Boosting Model", "Random Forest Model")
rownames(accuracy) <- "Accuracy"
accuracy
importance <- sort(model.rf$importance, decreasing=TRUE)
importance
importance <- model.rf$importance
importance <- sort(importance, decreasing=TRUE)
importance
model.rf
attributes(model.rf)
model.rf$importance
importance <- model.rf$importance
importance
importance2 <- sort(importance, decreasing=TRUE)
importance2
attributes(importance)
class(importance)
dim(importance)
?sort
importance
a <- importance[order(immportance[,1]),]
a <- importance[order(importance[,1]),]
a
a <- importance[order(importance[,1], decreasing=TRUE),]
a
importance <- model.rf$importance
importance <- importance[order(importance[,1], decreasing=TRUE)]
importance
importance <- model.rf$importance
importance <- importance[order(importance[,1], decreasing=TRUE),]
importance
paste(round((1-confusion.rf[[3]][1])*100, 2), "%", sep="")
pred.assignment <- predict(model.rf, newdata=assignment.filtered)
pred.assignment
test.results <- as.character(pred.assignment)
test.results
model.rf2 <- randomForest(classe ~ ., proximity=TRUE, data=training)
?MDSplot
MDSplot(model.rf2, training$classe)
model.rf2 <- randomForest(classe ~ ., proximity=TRUE, data=training[1:1000,])
training2 <- training[1:1000,]
model.rf2 <- randomForest(classe ~ ., proximity=TRUE, data=training2)
rm(model.rf2)
model.rf2 <- randomForest(classe ~ ., proximity=TRUE, data=training2)
set.seed(1234)
inTrain2 <- createDataPartition(y=df.filtered$classe, p=0.1, list=FALSE)
training2 <- df.filtered[inTrain2,]
model.rf2 <- randomForest(classe ~ ., proximity=TRUE, data=training2)
MDSplot(model.rf2, training$classe)
plot(model.rf2)
plot(margin(model.rf))
plot(margin(model.rf), sort=TRUE)
plot(margin(model.rf), sort=TRUE)
plot(margin(model.rf2), sort=TRUE)
head(getTree(mode.rf, 1), n=20)
head(getTree(model.rf, 1), n=20)
getTree(model.rf, 1)
head(getTree(model.rf, 1), n=50)
getTree(model.rf,1)
library(slidify)
slidify("index.Rmd")
setwd("ddp")
slidify("index.Rmd")
getwd()
ls
setwd(ddp_slides)
setwd("ddp_slides")
slidify("index.Rmd")
